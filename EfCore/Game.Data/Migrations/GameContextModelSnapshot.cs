// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Game.Data.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Game.Domain.Club", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("City")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<DateTime>("DateOfEstablishment")
                    .HasColumnType("date");

                b.Property<string>("History")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int?>("LeagueId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                    .HasMaxLength(20);

                b.HasKey("Id");

                b.HasIndex("LeagueId");

                b.ToTable("Clubs");
            });

            modelBuilder.Entity("Game.Domain.Game", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("Round")
                    .HasColumnType("int");

                b.Property<DateTimeOffset?>("StartTime")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.ToTable("Game");
            });

            modelBuilder.Entity("Game.Domain.GamePlayer", b =>
            {
                b.Property<int>("GameId")
                    .HasColumnType("int");

                b.Property<int>("PlayerId")
                    .HasColumnType("int");

                b.HasKey("GameId", "PlayerId");

                b.HasIndex("PlayerId");

                b.ToTable("GamePlayer");
            });

            modelBuilder.Entity("Game.Domain.League", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Country")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Name")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.ToTable("Leagues");
            });

            modelBuilder.Entity("Game.Domain.Player", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("BirthDay")
                    .HasColumnType("datetime(6)");

                b.Property<int?>("ClubId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int>("ResumeId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ClubId");

                b.ToTable("Players");
            });

            modelBuilder.Entity("Game.Domain.Resume", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Description")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int>("PlayerId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("PlayerId")
                    .IsUnique();

                b.ToTable("Resume");
            });

            modelBuilder.Entity("Game.Domain.Club", b =>
            {
                b.HasOne("Game.Domain.League", "League")
                    .WithMany()
                    .HasForeignKey("LeagueId");
            });

            modelBuilder.Entity("Game.Domain.GamePlayer", b =>
            {
                b.HasOne("Game.Domain.Game", "Game")
                    .WithMany("GamePlayers")
                    .HasForeignKey("GameId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Game.Domain.Player", "Player")
                    .WithMany("GamePlayers")
                    .HasForeignKey("PlayerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Game.Domain.Player", b =>
            {
                b.HasOne("Game.Domain.Club", null)
                    .WithMany("Players")
                    .HasForeignKey("ClubId");
            });

            modelBuilder.Entity("Game.Domain.Resume", b =>
            {
                b.HasOne("Game.Domain.Player", "Player")
                    .WithOne("Resume")
                    .HasForeignKey("Game.Domain.Resume", "PlayerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}